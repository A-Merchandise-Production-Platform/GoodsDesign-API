generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Roles {
  ADMIN
  MANAGER
  STAFF
  FACTORYOWNER
  CUSTOMER
}

enum VoucherType {
  FIXED_VALUE
  PERCENTAGE
}

model User {
  id          String    @id @default(uuid())
  email       String    @unique
  name        String?
  phoneNumber String?
  password    String    @default("")
  gender      Boolean   @default(false)
  dateOfBirth DateTime?
  imageUrl    String?   @default("")
  isActive    Boolean   @default(false)
  isDeleted   Boolean   @default(false)
  createdAt   DateTime  @default(now())
  createdBy   String?
  updatedAt   DateTime?
  updatedBy   String?
  deletedBy   String?
  deletedAt   DateTime?
  role        Roles

  addresses      Address[]
  bankAccounts   UserBank[]
  designs        ProductDesign[]
  favorites      FavoriteDesign[]
  orders         Order[]
  payments       Payment[]
  transactions   PaymentTransaction[]
  tasks          Task[]
  notification   Notification[]
  cartItems      CartItem[]
  vouchers       Voucher[]
  ownedFactory   Factory?             @relation("FactoryOwner")
  staffedFactory Factory?             @relation("FactoryStaff")
  voucherUsages  VoucherUsage[]
}

model Address {
  id         String  @id @default(uuid())
  provinceID Int
  districtID Int
  wardCode   String
  street     String
  userId     String
  factoryId  String?
  formattedAddress String?

  user    User     @relation(fields: [userId], references: [id])
  factory Factory?
  orders  Order[]
}

model Category {
  id          String    @id @default(uuid())
  name        String
  description String?
  imageUrl    String?
  isActive    Boolean   @default(true)
  isDeleted   Boolean   @default(false)
  createdAt   DateTime  @default(now())
  createdBy   String?
  updatedAt   DateTime?
  updatedBy   String?
  deletedAt   DateTime?
  deletedBy   String?

  products Product[]
}

model Product {
  id          String    @id @default(uuid())
  name        String
  description String?
  imageUrl    String?
  model3DUrl  String?
  weight      Int?
  isActive    Boolean   @default(true)
  isDeleted   Boolean   @default(false)
  createdAt   DateTime  @default(now())
  createdBy   String?
  updatedAt   DateTime?
  updatedBy   String?
  deletedAt   DateTime?
  deletedBy   String?
  categoryId  String

  category      Category               @relation(fields: [categoryId], references: [id])
  positionTypes ProductPositionType[]
  discounts     SystemConfigDiscount[]
  variants      SystemConfigVariant[]
}

model SystemConfigBank {
  id        String  @id @default(uuid())
  name      String
  code      String
  bin       String
  shortName String
  logo      String
  isActive  Boolean @default(true)
  isDeleted Boolean @default(false)
  
  userBanks UserBank[]
}

model SystemConfigDiscount {
  id              String   @id @default(uuid())
  name            String
  minQuantity     Int
  discountPercent Float
  isActive        Boolean  @default(true)
  isDeleted       Boolean  @default(false)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  productId       String
  product         Product  @relation(fields: [productId], references: [id])

  @@unique([productId, minQuantity])
}

model SystemConfigVariant {
  id        String  @id @default(uuid())
  productId String
  size      String?
  color     String?
  model     String?
  price     Int?
  isActive  Boolean @default(true)
  isDeleted Boolean @default(false)
  product   Product @relation(fields: [productId], references: [id])

  factoryProducts FactoryProduct[]
  productDesigns  ProductDesign[]
  cartItems       CartItem[]
  orderDetails    OrderDetail[]
}

model ProductPositionType {
  id           String @id @default(uuid())
  productId    String
  positionName String
  basePrice    Int

  product         Product          @relation(fields: [productId], references: [id])
  designPositions DesignPosition[]

}

model ProductDesign {
  id                    String   @id @default(uuid())
  userId                String
  systemConfigVariantId String
  isFinalized           Boolean  @default(false)
  createdAt             DateTime @default(now())
  isPublic              Boolean  @default(false)
  isTemplate            Boolean  @default(false)
  thumbnailUrl          String?
  isDeleted             Boolean  @default(false)

  user                User                  @relation(fields: [userId], references: [id])
  systemConfigVariant SystemConfigVariant   @relation(fields: [systemConfigVariantId], references: [id])
  favorites           FavoriteDesign[]
  designPositions     DesignPosition[]
  orderDetails        OrderDetail[]
  cartItem            CartItem[]
}

model DesignPosition {
  designId              String
  productPositionTypeId String
  designJSON            Json

  design       ProductDesign       @relation(fields: [designId], references: [id])
  positionType ProductPositionType @relation(fields: [productPositionTypeId], references: [id])

  @@id(name: "designPositionId", [designId, productPositionTypeId])
}

model FavoriteDesign {
  id        String   @id @default(uuid())
  userId    String
  designId  String
  createdAt DateTime @default(now())

  user   User          @relation(fields: [userId], references: [id])
  design ProductDesign @relation(fields: [designId], references: [id])
}

enum PaymentType {
  DEPOSIT
  WITHDRAWN
}

enum PaymentStatus {
  PENDING
  COMPLETED
}

enum TransactionType {
  PAYMENT
  REFUND
}

enum PaymentMethod {
  VNPAY
  PAYOS
  BANK
}

enum TransactionStatus {
  COMPLETED
  PENDING
  FAILED
}

enum FactoryStatus {
  PENDING_APPROVAL
  APPROVED
  REJECTED
  SUSPENDED
}

model Payment {
  id         String        @id @default(uuid())
  orderId    String
  customerId String
  amount     Int
  type       PaymentType
  paymentLog String
  createdAt  DateTime
  status     PaymentStatus

  order        Order             @relation(fields: [orderId], references: [id])
  customer     User              @relation(fields: [customerId], references: [id])
  transactions PaymentTransaction[]
}

model PaymentTransaction {
  id                          String            @id @default(uuid())
  paymentId                   String
  customerId                  String
  paymentGatewayTransactionId String
  amount                      Int
  type                        TransactionType
  paymentMethod               PaymentMethod
  status                      TransactionStatus
  transactionLog              String
  createdAt                   DateTime
  imageUrls                   String[] @default([])
  userBankId                  String?

  payment  Payment @relation(fields: [paymentId], references: [id])
  customer User    @relation(fields: [customerId], references: [id])
  userBank UserBank? @relation(fields: [userBankId], references: [id])
}

model Notification {
  id        String    @id @default(uuid())
  title     String?
  content   String?
  url       String?
  isRead    Boolean   @default(false)
  userId    String
  createdAt DateTime  @default(now())
  updatedAt DateTime?

  user User @relation(fields: [userId], references: [id])
}

model CartItem {
  id        String   @id @default(uuid())
  userId    String
  designId  String
  systemConfigVariantId String
  quantity  Int
  createdAt DateTime @default(now())

  user   User          @relation(fields: [userId], references: [id])
  design ProductDesign @relation(fields: [designId], references: [id])
  systemConfigVariant SystemConfigVariant @relation(fields: [systemConfigVariantId], references: [id])
}

model FactoryProduct {
  factoryId               String 
  systemConfigVariantId   String
  productionCapacity      Int
  productionTimeInMinutes Int  @default(300)

  factory             Factory             @relation(fields: [factoryId], references: [factoryOwnerId])
  systemConfigVariant SystemConfigVariant @relation(fields: [systemConfigVariantId], references: [id])

  @@id(name: "factoryProductId", [factoryId, systemConfigVariantId])
}

model Factory {
  factoryOwnerId          String  @id @unique
  name                    String
  description             String?
  businessLicenseUrl      String?
  taxIdentificationNumber String?
  addressId               String? @unique

  website             String?
  establishedDate     DateTime

  qualityCertifications String?
  printingMethods       String[]
  specializations       String[]

  contactPersonName String?
  contactPersonRole String?
  contactPhone      String?

  maxPrintingCapacity Int
  leadTime             Int?
  legitPoint Int @default(100)

  factoryStatus      FactoryStatus @default(PENDING_APPROVAL)
  isSubmitted        Boolean       @default(false)
  statusNote         String?
  contractAccepted   Boolean       @default(false)
  contractAcceptedAt DateTime?
  reviewedBy         String?
  reviewedAt         DateTime?

  contractUrl String?

  staffId String? @unique

  owner          User                   @relation("FactoryOwner", fields: [factoryOwnerId], references: [id])
  products       FactoryProduct[]
  staff          User?                  @relation("FactoryStaff", fields: [staffId], references: [id])
  orders         Order[]
  address        Address?               @relation(fields: [addressId], references: [id])
  rejectedOrders RejectedOrder[]
}

enum OrderStatus {
  // Trạng thái ban đầu
  PENDING
  PAYMENT_RECEIVED
  WAITING_FILL_INFORMATION
  
  // Trạng thái phân công
  NEED_MANAGER_HANDLE
  NEED_MANAGER_HANDLE_REWORK
  PENDING_ACCEPTANCE
  REJECTED                        // Bị từ chối bởi nhà máy

  //Refund 
  WAITING_FOR_REFUND
  REFUNDED
  
  // Trạng thái sản xuất
  IN_PRODUCTION
  
  // Trạng thái kiểm tra
  WAITING_FOR_CHECKING_QUALITY
  REWORK_REQUIRED
  REWORK_IN_PROGRESS           
  
  // Trạng thái thanh toán và giao hàng
  WAITING_PAYMENT
  READY_FOR_SHIPPING              // Thêm trạng thái mới
  SHIPPING
  SHIPPED
  
  // Trạng thái kết thúc
  COMPLETED
  CANCELED                        // Bị hủy
}
enum OrderDetailStatus {
  PENDING
  IN_PRODUCTION
  DONE_PRODUCTION
  
  WAITING_FOR_CHECKING_QUALITY
  DONE_CHECK_QUALITY

  REWORK_REQUIRED
  REWORK_IN_PROGRESS
  REWORK_DONE
  
  READY_FOR_SHIPPING              // Thêm trạng thái mới
  SHIPPING
  SHIPPED
  COMPLETED                       // Thêm để nhất quán với OrderStatus
}

model Order {
  id                      String      @id @default(uuid())
  customerId              String
  factoryId               String?
  status                  OrderStatus
  totalPrice              Int
  shippingPrice           Int @default(0)
  orderDate               DateTime    @default(now())
  
  totalItems              Int
  updatedAt               DateTime?   @updatedAt
  totalProductionCost     Int?
  voucherId               String?     @unique

  currentProgress Int @default(0)
  delayReason     String?
  isDelayed       Boolean   @default(false)

  // Quality rating
  rating        Int?
  ratingComment String?
  ratedAt       DateTime?
  ratedBy       String?


//Time
  assignedAt              DateTime?
  acceptanceDeadline      DateTime?
  acceptedAt              DateTime?
  
  sendForShippingAt      DateTime?
  shippedAt               DateTime?
  estimatedShippingAt    DateTime
  doneProductionAt       DateTime?
  estimatedDoneProductionAt DateTime
  doneCheckQualityAt     DateTime?
  estimatedCheckQualityAt DateTime
  completedAt            DateTime?
  estimatedCompletionAt  DateTime

  addressId      String?
  address        Address?               @relation(fields: [addressId], references: [id])

  customer     User                 @relation(fields: [customerId], references: [id])
  factory      Factory?             @relation(fields: [factoryId], references: [factoryOwnerId])
  voucher      Voucher?             @relation(fields: [voucherId], references: [id])
  orderDetails OrderDetail[]
  payments     Payment[]
  orderProgressReports OrderProgressReport[]
  tasks           Task[]
  rejectedHistory RejectedOrder[]
  voucherUsages   VoucherUsage[]
}

model OrderDetail {
  id             String            @id @default(uuid())
  orderId        String
  designId       String
  systemConfigVariantId String
  price          Int
  quantity       Int
  status         OrderDetailStatus @default(PENDING)
  completedQty   Int               @default(0)
  rejectedQty    Int               @default(0)
  createdAt      DateTime          @default(now())
  updatedAt      DateTime?         @updatedAt
  productionCost Int?
  reworkTime     Int               @default(0)
  isRework       Boolean           @default(false)

  order  Order         @relation(fields: [orderId], references: [id])
  design ProductDesign @relation(fields: [designId], references: [id])
  systemConfigVariant SystemConfigVariant @relation(fields: [systemConfigVariantId], references: [id])

  checkQualities CheckQuality[]
}

model OrderProgressReport {
  id                  String   @id @default(uuid())
  orderId             String
  reportDate          DateTime @default(now())
  note                String?
  imageUrls           String[]

  order Order @relation(fields: [orderId], references: [id])
}

model RejectedOrder {
  id             String    @id @default(uuid())
  orderId        String
  factoryId      String
  reason         String
  rejectedAt     DateTime  @default(now())
  reassignedTo   String?
  reassignedAt   DateTime?

  order   Order  @relation(fields: [orderId], references: [id])
  factory Factory @relation(fields: [factoryId], references: [factoryOwnerId])
}

enum TaskStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  EXPIRED
  NEED_ASSIGN
  CANCELLED
}

enum TaskType {
  QUALITY_CHECK
}

model Task {
  id                 String             @id @default(uuid())
  taskname           String
  description        String
  
  // Thông tin nhiệm vụ
  startDate          DateTime
  expiredTime        DateTime // 2 day system config
  taskType           TaskType @default(QUALITY_CHECK)
  orderId            String?
  
  // Thông tin phân công (từ StaffTask)
  userId         String?            // Thay thế userId
  assignedDate       DateTime       @default(now())
  status             TaskStatus     @default(PENDING)
  completedDate      DateTime?          // Từ StaffTask
  note               String?            // Từ StaffTask
  
  // Các mối quan hệ
  checkQualities     CheckQuality[]
  order              Order?             @relation(fields: [orderId], references: [id])
  assignee           User?              @relation(fields: [userId], references: [id])
}

enum QualityCheckStatus {
  PENDING
  APPROVED
  REJECTED
}

model CheckQuality {
  id             String             @id @default(uuid())
  taskId         String
  orderDetailId  String
  totalChecked   Int            @default(0)
  passedQuantity Int            @default(0)
  failedQuantity Int            @default(0)
  status         QualityCheckStatus @default(PENDING)
  note           String?
  createdAt       DateTime       @default(now())
  checkedAt      DateTime
  checkedBy      String?
  imageUrls      String[]

  task        Task        @relation(fields: [taskId], references: [id])
  orderDetail OrderDetail @relation(fields: [orderDetailId], references: [id])
}

enum SystemConfigOrderType {
  SYSTEM_CONFIG_ORDER
}

model SystemConfigOrder {
  id          String @id @default(uuid())
  type        SystemConfigOrderType @default(SYSTEM_CONFIG_ORDER) @unique
  limitFactoryRejectOrders Int @default(3)
  checkQualityTimesDays Int @default(2)
  limitReworkTimes Int @default(2)
  shippingDays Int @default(2)
  reduceLegitPointIfReject Int @default(3)
  legitPointToSuspend Int @default(20)
  acceptHoursForFactory Int @default(12)
  
  // Factory scoring parameters
  maxLegitPoint Int @default(100)
  maxProductionTimeInMinutes Int @default(300)
  maxProductionCapacity Int @default(1000)
  
  // Factory scoring weights
  capacityScoreWeight Float @default(0.25)
  leadTimeScoreWeight Float @default(0.15)
  specializationScoreWeight Float @default(0.15)
  legitPointScoreWeight Float @default(0.25)
  productionCapacityScoreWeight Float @default(0.2)

  // Voucher base value for refund
  voucherBaseValueForRefund Int @default(20000)
  voucherBaseTypeForRefund VoucherType @default(FIXED_VALUE)
}

model UserBank {
  id              String   @id @default(uuid())
  userId          String
  bankId          String
  accountNumber   String
  accountName     String
  isDefault       Boolean  @default(false)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  user            User            @relation(fields: [userId], references: [id])
  bank            SystemConfigBank @relation(fields: [bankId], references: [id])
  paymentTransactions PaymentTransaction[]
}

model Voucher {
  id              String      @id @default(uuid())
  code            String      @unique
  type            VoucherType
  value           Int      
  minOrderValue   Int?        
  maxDiscountValue Int?       
  description     String?
  isPublic        Boolean     @default(false)
  limitedUsage    Int?
  isActive        Boolean     @default(true)
  isDeleted       Boolean     @default(false)
  createdAt       DateTime    @default(now())
  updatedAt       DateTime?   @updatedAt
  userId          String?     
  
  user            User?        @relation(fields: [userId], references: [id])
  order           Order?      
  usages          VoucherUsage[]
}

model VoucherUsage {
  id        String   @id @default(uuid())
  voucherId String
  userId    String
  usedAt    DateTime @default(now())
  orderId   String

  voucher   Voucher @relation(fields: [voucherId], references: [id])
  user      User    @relation(fields: [userId], references: [id])
  order     Order   @relation(fields: [orderId], references: [id])

  @@unique([voucherId, userId]) 
}