generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Roles {
  ADMIN
  MANAGER
  STAFF
  FACTORYOWNER
  CUSTOMER
}

model User {
  id          String    @id @default(uuid())
  email       String    @unique
  name        String?
  phoneNumber String?
  password    String    @default("")
  gender      Boolean   @default(false)
  dateOfBirth DateTime?
  imageUrl    String?   @default("")
  isActive    Boolean   @default(false)
  isDeleted   Boolean   @default(false)
  createdAt   DateTime  @default(now())
  createdBy   String?
  updatedAt   DateTime?
  updatedBy   String?
  deletedBy   String?
  deletedAt   DateTime?
  role        Roles

  addresses    Address[]
  designs      ProductDesign[]
  favorites    FavoriteDesign[]
  orders       CustomerOrder[]
  payments     Payment[]
  transactions PaymentTransaction[]
  staffTasks   StaffTask[]
  notification Notification[]
  cartItems    CartItem[]
  ownedFactory Factory? @relation("FactoryOwner")
  staffedFactory Factory? @relation("FactoryStaff")
}

model Address {
  id         String  @id @default(uuid())
  provinceID Int
  districtID Int
  wardCode   String
  street     String
  userId     String
  factoryId  String?

  user    User     @relation(fields: [userId], references: [id])
  factory Factory?

  @@map("Addresses")
}

model Category {
  id          String    @id @default(uuid())
  name        String
  description String?
  imageUrl    String?
  isActive    Boolean   @default(true)
  isDeleted   Boolean   @default(false)
  createdAt   DateTime  @default(now())
  createdBy   String?
  updatedAt   DateTime?
  updatedBy   String?
  deletedAt   DateTime?
  deletedBy   String?

  products Product[]

  @@map("Categories")
}

model Product {
  id          String    @id @default(uuid())
  name        String
  description String?
  imageUrl    String?
  model3DUrl  String?
  weight      Int?
  isActive    Boolean   @default(true)
  isDeleted   Boolean   @default(false)
  createdAt   DateTime  @default(now())
  createdBy   String?
  updatedAt   DateTime?
  updatedBy   String?
  deletedAt   DateTime?
  deletedBy   String?
  categoryId  String

  category       Category              @relation(fields: [categoryId], references: [id])
  positionTypes  ProductPositionType[]
  discounts      SystemConfigDiscount[]
  variants       SystemConfigVariant[]

  @@map("Products")
}

model SystemConfigBank {
  id        String  @id @default(uuid())
  name      String
  code      String
  bin       String
  shortName String
  logo      String
  isActive  Boolean @default(true)
  isDeleted Boolean @default(false)
}


model SystemConfigDiscount {
  id              String   @id @default(uuid())
  name            String
  minQuantity     Int
  discountPercent Float
  isActive        Boolean  @default(true)
  isDeleted       Boolean  @default(false)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  productId       String
  product         Product  @relation(fields: [productId], references: [id])

  @@unique([productId, minQuantity])
}

model SystemConfigVariant {
  id        String  @id @default(uuid())
  productId String
  size      String?
  color     String?
  model     String?
  price     Int?
  isActive  Boolean @default(true)
  isDeleted Boolean @default(false)
  product   Product  @relation(fields: [productId], references: [id])

  factoryProducts FactoryProduct[]
  productDesigns ProductDesign[]
}

model ProductPositionType {
  id           String @id @default(uuid())
  productId    String
  positionName String
  basePrice    Int

  product         Product          @relation(fields: [productId], references: [id])
  designPositions DesignPosition[]

  @@map("ProductPositionType")
}

model ProductDesign {
  id                String   @id @default(uuid())
  userId            String
  systemConfigVariantId    String
  isFinalized       Boolean  @default(false)
  createdAt         DateTime @default(now())
  isPublic          Boolean  @default(false)
  isTemplate        Boolean  @default(false)
  thumbnailUrl      String?

  user                User                  @relation(fields: [userId], references: [id])
  systemConfigVariant SystemConfigVariant   @relation(fields: [systemConfigVariantId], references: [id])
  favorites           FavoriteDesign[]
  designPositions     DesignPosition[]
  orderDetails        CustomerOrderDetail[]
  factoryOrderDetails FactoryOrderDetail[]

  cartItem CartItem[]
}

model DesignPosition {
  designId              String
  productPositionTypeId String
  designJSON            Json

  design       ProductDesign       @relation(fields: [designId], references: [id])
  positionType ProductPositionType @relation(fields: [productPositionTypeId], references: [id])

  @@id(name: "designPositionId", [designId, productPositionTypeId])
}

model FavoriteDesign {
  id        String   @id @default(uuid())
  userId    String
  designId  String
  createdAt DateTime @default(now())

  user   User          @relation(fields: [userId], references: [id])
  design ProductDesign @relation(fields: [designId], references: [id])
}

enum OrderStatus {
  PENDING
  PAYMENT_RECEIVED
  ASSIGNED_TO_FACTORY
  ACCEPTED
  IN_PRODUCTION
  DONE_PRODUCTION
  WAITING_PAYMENT
  WAITING_FILL_INFORMATION
  DELIVERED
  CANCELED
}

enum QualityCheckStatus {
  PENDING
  PARTIAL_APPROVED
  APPROVED
  REJECTED
}

enum ReworkStatus {
  NOT_REQUIRED
  IN_PROGRESS
  COMPLETED
}

model CustomerOrder {
  id            String      @id @default(uuid())
  customerId    String
  status        OrderStatus
  totalPrice    Int
  shippingPrice Int
  depositPaid   Int
  orderDate     DateTime

  // Đánh giá chất lượng sản xuất
  rating            Int?               // Đánh giá từ 1-5 sao
  ratingComment     String?            // Nhận xét về chất lượng sản xuất
  ratedAt           DateTime?          // Thời điểm đánh giá
  ratedBy           String?            // Người đánh giá

  customer     User                  @relation(fields: [customerId], references: [id])
  orderDetails CustomerOrderDetail[]
  payments     Payment[]
  history      OrderHistory[]
  factoryOrder FactoryOrder[]
}

model CustomerOrderDetail {
  id                 String             @id @default(uuid())
  orderId            String
  designId           String
  price              Int
  quantity           Int
  status             OrderDetailStatus
  qualityCheckStatus QualityCheckStatus
  reworkStatus       ReworkStatus

  order               CustomerOrder        @relation(fields: [orderId], references: [id])
  design              ProductDesign        @relation(fields: [designId], references: [id])
  checkQualities      CheckQuality[]
  factoryOrderDetails FactoryOrderDetail[]
}

enum PaymentType {
  DEPOSIT
  WITHDRAWN
}

enum PaymentStatus {
  PENDING
  COMPLETED
}

enum TransactionType {
  PAYMENT
  REFUND
}

enum PaymentMethod {
  VNPAY
  PAYOS
}

enum TransactionStatus {
  COMPLETED
  PENDING
  FAILED
}

model Payment {
  id         String        @id @default(uuid())
  orderId    String
  customerId String
  amount     Int
  type       PaymentType
  paymentLog String
  createdAt  DateTime
  status     PaymentStatus

  order        CustomerOrder        @relation(fields: [orderId], references: [id])
  customer     User                 @relation(fields: [customerId], references: [id])
  transactions PaymentTransaction[]
}

model PaymentTransaction {
  id                          String            @id @default(uuid())
  paymentId                   String
  customerId                  String
  paymentGatewayTransactionId String
  amount                      Int
  type                        TransactionType
  paymentMethod               PaymentMethod
  status                      TransactionStatus
  transactionLog              String
  createdAt                   DateTime

  payment  Payment       @relation(fields: [paymentId], references: [id])
  customer User          @relation(fields: [customerId], references: [id])
}

model OrderHistory {
  id        String   @id @default(uuid())
  orderId   String
  status    String
  timestamp DateTime
  note      String?

  order CustomerOrder @relation(fields: [orderId], references: [id])
}

model Task {
  id                 String   @id @default(uuid())
  description        String
  taskname           String
  status             String
  startDate          DateTime
  expiredTime        DateTime
  qualityCheckStatus QualityCheckStatus // Thay đổi từ String sang enum
  taskType           String?            // Loại nhiệm vụ
  factoryOrderId     String?            // Liên kết với FactoryOrder
  assignedBy         String?            // Người giao nhiệm vụ

  checkQualities CheckQuality[]
  staffTasks     StaffTask[]
  factoryOrder      FactoryOrder?      @relation(fields: [factoryOrderId], references: [id])
}

model CheckQuality {
  id                 String             @id @default(uuid())
  taskId             String
  orderDetailId      String
  factoryOrderDetailId String?          // Thêm liên kết với FactoryOrderDetail
  totalChecked       Int
  passedQuantity     Int
  failedQuantity     Int
  status             QualityCheckStatus // Thay đổi từ String sang enum
  reworkRequired     Boolean
  note               String?
  checkedAt          DateTime
  checkedBy          String?            // Thêm người kiểm tra

  task               Task                @relation(fields: [taskId], references: [id])
  orderDetail        CustomerOrderDetail @relation(fields: [orderDetailId], references: [id])
  factoryOrderDetail FactoryOrderDetail? @relation(fields: [factoryOrderDetailId], references: [id])
}

model StaffTask {
  id            String    @id @default(uuid())
  userId        String
  taskId        String
  assignedDate  DateTime
  note          String?
  status        String
  completedDate DateTime?

  user User @relation(fields: [userId], references: [id])
  task Task @relation(fields: [taskId], references: [id])
}

model FactoryProduct {
  id                      String @id @default(uuid())
  factoryId               String
  systemConfigVariantId         String
  productionCapacity      Int
  estimatedProductionTime Int

  factory             Factory             @relation(fields: [factoryId], references: [factoryOwnerId])
  systemConfigVariant SystemConfigVariant @relation(fields: [systemConfigVariantId], references: [id])
}

enum FactoryStatus {
  PENDING_APPROVAL
  APPROVED
  REJECTED
  SUSPENDED
}

model Factory {
  factoryOwnerId          String  @id @unique
  name                    String // Factory business name
  description             String? // Description of the factory
  businessLicenseUrl      String? // Business license document URL
  taxIdentificationNumber String? // Tax ID
  addressId               String? @unique // Factory address, optional but unique when present

  // Factory specific information
  website             String? // Factory website
  establishedDate     DateTime // Date the factory was established
  totalEmployees      Int // Number of employees
  maxPrintingCapacity Int // Overall maximum printing capacity per day

  // Quality and certifications
  qualityCertifications String? // Details about quality certifications
  printingMethods       String[] // Main printing methods used
  specializations       String[] // Specializations (e.g., eco-friendly, premium)

  // Contact information
  contactPersonName String? // Name of primary contact
  contactPersonRole String? // Role of primary contact
  contactPhone      String? // Factory contact phone

  // Operational details
  operationalHours     String // Working hours
  leadTime             Int? // Average lead time in days
  minimumOrderQuantity Int // Minimum acceptable order quantity

  // Status tracking
  factoryStatus      FactoryStatus @default(PENDING_APPROVAL)
  isSubmitted        Boolean       @default(false)  // Track if factory info has been submitted for approval
  statusNote         String? // Note about status (especially for rejections)
  contractAccepted   Boolean       @default(false)
  contractAcceptedAt DateTime?
  reviewedBy         String? // Admin who reviewed the application
  reviewedAt         DateTime?

  // Keep the contract as JSON since it might be complex and vary over time
  contractUrl String?

  //staff id
  staffId String? @unique

  owner    User             @relation("FactoryOwner", fields: [factoryOwnerId], references: [id])
  products FactoryProduct[]
  staff    User?             @relation("FactoryStaff", fields: [staffId], references: [id])
  orders   FactoryOrder[]
  address  Address?         @relation(fields: [addressId], references: [id])
}

enum FactoryOrderStatus {
  PENDING_ACCEPTANCE  // Đợi factory chấp nhận
  ACCEPTED            // Factory đã chấp nhận  
  EXPIRED             // Factory không phản hồi trong thời gian quy định
  REJECTED            // Factory từ chối
  IN_PRODUCTION       // Đang sản xuất
  DONE_PRODUCTION       // Đang sản xuất
  COMPLETED           // Đã hoàn thành sản xuất
  SHIPPED             // Đã gửi hàng về kho chính
  CANCELLED           // Đã hủy
}

model FactoryOrder {
  id                  String             @id @default(uuid())
  factoryId           String
  customerOrderId     String             
  status              FactoryOrderStatus 
  assignedAt          DateTime           
  acceptanceDeadline  DateTime           
  acceptedAt          DateTime?
  rejectionReason     String?
  estimatedCompletionDate DateTime?
  completedAt         DateTime?
  shippedAt           DateTime?
  totalItems          Int
  createdAt           DateTime           @default(now())
  updatedAt           DateTime?          @updatedAt
  totalProductionCost Int

  // Tiến độ sản xuất
  lastUpdated       DateTime?          @updatedAt
  currentProgress   Int?               // Tiến độ hiện tại (phần trăm)
  delayReason       String?            // Lý do trễ hạn nếu có
  isDelayed         Boolean            @default(false) // Đánh dấu đơn hàng bị trễ

  factory            Factory               @relation(fields: [factoryId], references: [factoryOwnerId])
  customerOrder      CustomerOrder         @relation(fields: [customerOrderId], references: [id])
  orderDetails       FactoryOrderDetail[]
  progressReports    FactoryProgressReport[]
  qualityIssues      QualityIssue[]
  tasks            Task[]
}

enum OrderDetailStatus {
  PENDING
  IN_PRODUCTION
  COMPLETED
  REJECTED
  QUALITY_CHECK_PENDING
  QUALITY_CHECK_PASSED
  QUALITY_CHECK_FAILED
  REWORK_REQUIRED
  REWORK_IN_PROGRESS
  REWORK_COMPLETED
  SHIPPED
}

model FactoryOrderDetail {
  id             String            @id @default(uuid())
  designId       String
  factoryOrderId String
  orderDetailId  String
  quantity       Int
  price          Int
  status         OrderDetailStatus @default(PENDING)
  completedQty   Int               @default(0)
  rejectedQty    Int               @default(0)
  createdAt      DateTime          @default(now())
  updatedAt      DateTime?         @updatedAt
  productionCost Int

  qualityStatus    QualityCheckStatus?
  qualityCheckedAt DateTime?
  qualityCheckedBy String?

  factoryOrder FactoryOrder        @relation(fields: [factoryOrderId], references: [id])
  design       ProductDesign       @relation(fields: [designId], references: [id])
  orderDetail  CustomerOrderDetail @relation(fields: [orderDetailId], references: [id])

  checkQualities CheckQuality[]
}

model FactoryProgressReport {
  id                 String    @id @default(uuid())
  factoryOrderId     String
  reportDate         DateTime  @default(now())
  completedQty       Int
  estimatedCompletion DateTime
  notes              String?
  photoUrls          String[]
  
  factoryOrder       FactoryOrder @relation(fields: [factoryOrderId], references: [id])
}

enum QualityIssueStatus {
  REPORTED
  INVESTIGATING
  RESOLVED
  REJECTED
}

model QualityIssue {
  id                String             @id @default(uuid())
  factoryOrderId    String
  reportedAt        DateTime           @default(now())
  reportedBy        String?            // Người báo cáo vấn đề
  assignedTo        String?            // Người được giao xử lý
  issueType         String
  description       String
  photoUrls         String[]
  status            QualityIssueStatus
  resolution        String?
  resolvedAt        DateTime?
  resolvedBy        String?            // Người đã giải quyết vấn đề
  
  factoryOrder      FactoryOrder       @relation(fields: [factoryOrderId], references: [id])
}

model Notification {
  id        String    @id @default(uuid())
  title     String?
  content   String?
  url       String?
  isRead    Boolean   @default(false)
  userId    String
  createdAt DateTime  @default(now())
  updatedAt DateTime?

  user User @relation(fields: [userId], references: [id])
}

model CartItem {
  id        String   @id @default(uuid())
  userId    String
  designId  String
  quantity  Int
  createdAt DateTime @default(now())

  user   User          @relation(fields: [userId], references: [id])
  design ProductDesign @relation(fields: [designId], references: [id])

  @@map("CartItems")
}
