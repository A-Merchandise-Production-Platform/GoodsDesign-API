# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type BlankVariancesEntity {
  blankPrice: Int!
  id: ID!
  information: JSON!
  product: ProductEntity
  productId: String!
}

type CategoryEntity {
  createdAt: DateTime!
  createdBy: String
  deletedAt: DateTime
  deletedBy: String
  description: String
  id: ID!
  imageUrl: String
  isActive: Boolean!
  isDeleted: Boolean!
  name: String!
  totalProducts: Int
  updatedAt: DateTime
  updatedBy: String
}

input CreateCustomerOrderDetailInput {
  price: Int!
  productId: String!
  qualityCheckStatus: String! = "PENDING"
  quantity: Int!
  reworkStatus: String! = "NOT_REQUIRED"
  status: String! = "PENDING"
}

input CreateCustomerOrderInput {
  customerId: String!
  depositPaid: Int!
  orderDetails: [CreateCustomerOrderDetailInput!]!
  shippingPrice: Int!
}

type CustomerOrder {
  customer: UserEntity!
  customerId: String!
  depositPaid: Float!
  history: [OrderHistory!]!
  id: ID!
  orderDate: DateTime!
  orderDetails: [CustomerOrderDetail!]!
  payments: [Payment!]!
  shippingPrice: Float!
  status: OrderStatus!
  totalPrice: Float!
  transactions: [PaymentTransaction!]!
}

type CustomerOrderDetail {
  customerOrderId: String!
  id: ID!
  price: Float!
  productId: String!
  quantity: Float!
}

input CustomerOrderFilterInput {
  customerId: String
  endDate: DateTime
  startDate: DateTime
  status: OrderStatus
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

type MonthlyGrowth {
  month: String!
  users: Float!
}

type Mutation {
  createCustomerOrder(input: CreateCustomerOrderInput!): CustomerOrder!
  removeCustomerOrder(id: ID!): CustomerOrder!
  updateCustomerOrder(input: UpdateCustomerOrderInput!): CustomerOrder!
}

type OrderHistory {
  customerOrderId: String!
  id: ID!
  notes: String
  status: OrderStatus!
  timestamp: DateTime!
}

"""Status of the customer order"""
enum OrderStatus {
  ACCEPTED
  CANCELED
  COMPLETED
  DELIVERED
  IN_PRODUCTION
  PENDING
}

type PaginatedUsers {
  items: [UserEntity!]!
  meta: PaginationMeta!
}

input PaginationInput {
  limit: Float! = 10
  page: Float! = 1
}

type PaginationMeta {
  limit: Float!
  page: Float!
  total: Float!
  totalPages: Float!
}

type Payment {
  amount: Float!
  customerOrderId: String!
  id: ID!
  paymentDate: DateTime!
}

type PaymentTransaction {
  customerOrderId: String!
  id: ID!
  paymentId: String!
  status: String!
}

type ProductEntity {
  blankVariances: [BlankVariancesEntity!]
  category: CategoryEntity
  categoryId: String!
  createdAt: DateTime!
  createdBy: String
  deletedAt: DateTime
  deletedBy: String
  description: String
  id: ID!
  imageUrl: String
  isActive: Boolean!
  isDeleted: Boolean!
  model3DUrl: String
  name: String!
  updatedAt: DateTime
  updatedBy: String
}

type Query {
  blankVariance(id: String!): BlankVariancesEntity
  blankVariances: [BlankVariancesEntity!]!
  categories: [CategoryEntity!]!
  category(id: String!): CategoryEntity!
  customerOrder(id: ID!): CustomerOrder!
  customerOrders(filter: CustomerOrderFilterInput): [CustomerOrder!]!
  products: [ProductEntity!]!
  user(id: String!): UserEntity!
  userAnalytics: UserAnalyticsEntity!
  users(filter: UserFilter): PaginatedUsers!
}

type RoleDistribution {
  count: Float!
  role: Roles!
}

"""User roles"""
enum Roles {
  ADMIN
  CUSTOMER
  FACTORYOWNER
  MANAGER
  STAFF
}

input SortInput {
  createdAt: String
  email: String
}

input UpdateCustomerOrderInput {
  depositPaid: Int
  id: String!
  notes: String
  shippingPrice: Int
  status: OrderStatus
}

type UserAnalyticsEntity {
  monthlyGrowth: [MonthlyGrowth!]!
  roleDistribution: [RoleDistribution!]!
  stats: UserAnalyticsStats!
}

type UserAnalyticsStats {
  activeUsers: Float!
  newUsersLast30Days: Float!
  totalUsers: Float!
}

type UserEntity {
  createdAt: DateTime!
  createdBy: String
  dateOfBirth: DateTime
  deletedAt: DateTime
  deletedBy: String
  email: String
  gender: Boolean!
  id: ID!
  imageUrl: String
  isActive: Boolean!
  isDeleted: Boolean!
  name: String
  phoneNumber: String
  role: Roles!
  updatedAt: DateTime
  updatedBy: String
}

input UserFilter {
  email: String
  isActive: Boolean
  pagination: PaginationInput
  role: Roles
  sort: SortInput
}