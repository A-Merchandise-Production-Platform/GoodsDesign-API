# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type AddressEntity {
  districtID: Float!
  factory: FactoryEntity
  factoryId: String!
  id: String!
  provinceID: Float!
  street: String!
  user: UserEntity
  userId: String!
  wardCode: String!
}

"""Authentication response"""
type AuthResponseDto {
  accessToken: String!
  refreshToken: String!
  user: UserEntity!
}

input CalculateShippingFeeDto {
  fromDistrictId: Int!
  fromWardCode: String!
  height: Int = 10
  length: Int = 10
  serviceId: Int
  serviceTypeId: Int = 2
  toDistrictId: Int!
  toWardCode: String!
  weight: Int = 1000
  width: Int = 10
}

type CartItemEntity {
  createdAt: DateTime!
  design: ProductDesignEntity
  id: ID!
  quantity: Int!
  userId: String!
}

type CategoryEntity {
  createdAt: DateTime!
  createdBy: String
  deletedAt: DateTime
  deletedBy: String
  description: String
  id: ID!
  imageUrl: String
  isActive: Boolean!
  isDeleted: Boolean!
  name: String!
  products: [ProductEntity!]
  totalProducts: Int
  updatedAt: DateTime
  updatedBy: String
}

type CheckQualityEntity {
  checkedAt: DateTime!
  checkedBy: String
  createdAt: DateTime!
  failedQuantity: Int!
  id: ID!
  imageUrls: [String!]!
  note: String
  orderDetail: OrderDetailEntity
  orderDetailId: String!
  passedQuantity: Int!
  status: String!
  task: TaskEntity
  taskId: String!
  totalChecked: Int!
}

"""Create Address Input"""
input CreateAddressInput {
  districtID: Float!
  factoryId: String
  provinceID: Float!
  street: String!
  wardCode: String!
}

input CreateCartItemDto {
  designId: String!
  quantity: Int!
}

"""Create category input"""
input CreateCategoryDto {
  description: String
  imageUrl: String
  name: String!
}

input CreateFactoryProductInput {
  estimatedProductionTime: Int!
  factoryId: String!
  productionCapacity: Int!
  systemConfigVariantId: String!
}

input CreateOrderDetailInput {
  cartItemId: String!
}

input CreateOrderInput {
  orderDetails: [CreateOrderDetailInput!]!
}

input CreatePaymentTransactionInput {
  amount: Int!
  customerId: String!
  paymentGatewayTransactionId: String!
  paymentId: String!
  paymentMethod: PaymentMethod!
  status: TransactionStatus!
  transactionLog: String!
  type: TransactionType!
}

input CreateProductDesignDto {
  isFinalized: Boolean! = false
  isPublic: Boolean! = false
  isTemplate: Boolean! = false
  systemConfigVariantId: String!
  thumbnailUrl: String
  userId: String
}

"""Create Product"""
input CreateProductDto {
  categoryId: String!
  description: String
  imageUrl: String
  model3DUrl: String
  name: String!
  weight: Float
}

input CreateProductPositionTypeDto {
  basePrice: Int!
  positionName: String!
  productId: String!
}

input CreateSystemConfigBankDto {
  bin: String!
  code: String!
  isActive: Boolean! = true
  logo: String!
  name: String!
  shortName: String!
}

input CreateSystemConfigVariantInput {
  color: String
  model: String
  productId: String!
  size: String
}

"""Create user input"""
input CreateUserDto {
  dateOfBirth: String
  email: String!
  gender: Boolean = false
  imageUrl: String
  name: String!
  password: String!
  phoneNumber: String
  role: String
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type DesignPositionEntity {
  design: ProductDesignEntity
  designId: String!
  designJSON: JSON
  positionType: ProductPositionTypeEntity
  productPositionTypeId: String!
}

type District {
  districtId: Int!
  districtName: String!
  provinceId: Int!
}

input DoneCheckQualityInput {
  checkQualityId: String!
  failedQuantity: Int!
  imageUrls: [String!]
  note: String
  passedQuantity: Int!
}

type FactoryEntity {
  address: AddressEntity
  businessLicenseUrl: String
  contactPersonName: String
  contactPersonPhone: String
  contactPersonRole: String
  contractAccepted: Boolean
  contractAcceptedAt: DateTime
  contractUrl: String
  description: String
  establishedDate: DateTime
  factoryOwnerId: ID!
  factoryStatus: FactoryStatus
  isSubmitted: Boolean
  leadTime: Int
  maxPrintingCapacity: Int
  minimumOrderQuantity: Int
  name: String!
  operationalHours: String
  owner: UserEntity
  printingMethods: [String!]!
  products: [FactoryProductEntity!]
  qualityCertifications: String
  reviewedAt: DateTime
  reviewedBy: String
  specializations: [String!]!
  staff: UserEntity
  statusNote: String
  taxIdentificationNumber: String
  totalEmployees: Int
  website: String
}

type FactoryProductEntity {
  factory: FactoryEntity
  factoryId: String!
  productionCapacity: Int!
  productionTimeInMinutes: Int!
  systemConfigVariant: SystemConfigVariantEntity
  systemConfigVariantId: String!
}

"""The status of the factory"""
enum FactoryStatus {
  APPROVED
  PENDING_APPROVAL
  REJECTED
  SUSPENDED
}

input FeedbackOrderInput {
  rating: Int!
  ratingComment: String
}

type FileUploadResponse {
  url: String!
}

input GetAvailableServicesDto {
  fromDistrict: Int!
  toDistrict: Int!
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

"""Login input"""
input LoginDto {
  email: String!
  password: String!
}

type Mutation {
  acceptOrderForFactory(orderId: String!): OrderEntity!
  assignStaffToFactory(factoryId: String!, staffId: String!): FactoryEntity!
  calculateShippingFee(input: CalculateShippingFeeDto!): ShippingFee!
  changeFactoryStatus(data: UpdateFactoryStatusDto!): FactoryEntity!
  clearCart: Boolean!
  createAddress(createAddressInput: CreateAddressInput!): AddressEntity!
  createCartItem(createCartItemInput: CreateCartItemDto!): CartItemEntity!
  createCategory(createCategoryInput: CreateCategoryDto!): CategoryEntity!
  createFactoryProduct(data: CreateFactoryProductInput!): FactoryProductEntity!
  createNotification(content: String!, title: String!, url: String, userId: String!): NotificationEntity!
  createNotificationForManyUsers(content: String!, title: String!, url: String, userIds: [String!]!): [NotificationEntity!]!
  createOrder(createOrderInput: CreateOrderInput!): OrderEntity!
  createPayment(gateway: String!, paymentId: String!): String!
  createPaymentTransaction(input: CreatePaymentTransactionInput!): PaymentTransactionEntity!
  createProduct(input: CreateProductDto!): ProductEntity!
  createProductDesign(input: CreateProductDesignDto!): ProductDesignEntity!
  createProductPositionType(input: CreateProductPositionTypeDto!): ProductPositionTypeEntity!
  createSystemConfigBank(input: CreateSystemConfigBankDto!): SystemConfigBankEntity!
  createSystemConfigVariant(createSystemConfigVariantInput: CreateSystemConfigVariantInput!): SystemConfigVariantEntity!
  createUser(createUserInput: CreateUserDto!): UserEntity!
  deleteAddress(id: String!): AddressEntity!
  deleteCartItem(id: String!): CartItemEntity!
  deleteCategory(id: String!): CategoryEntity!
  deleteFactoryProduct(factoryId: String!, systemConfigVariantId: String!): FactoryProductEntity!
  deleteFile(fileUrl: String!): Boolean!
  deleteProduct(id: String!): ProductEntity!
  deleteUser(id: String!): UserEntity!
  doneCheckQuality(input: DoneCheckQualityInput!): CheckQualityEntity!
  doneProductionOrderDetails(orderDetailId: String!): OrderDetailEntity!
  doneReworkForOrderDetails(orderDetailId: String!): OrderDetailEntity!
  duplicateProductDesign(id: ID!): ProductDesignEntity!
  feedbackOrder(input: FeedbackOrderInput!, orderId: String!): OrderEntity!
  login(loginInput: LoginDto!): AuthResponseDto!
  logout: String!
  markNotificationAsRead(id: String!): NotificationEntity!
  refreshToken(refreshTokenInput: RefreshTokenDto!): AuthResponseDto!
  register(registerInput: RegisterDto!): AuthResponseDto!
  rejectOrder(orderId: String!, reason: String!): OrderEntity!
  removePaymentTransaction(id: ID!): PaymentTransactionEntity!
  removeProductDesign(id: ID!): ProductDesignEntity!
  removeProductPositionType(id: ID!): ProductPositionTypeEntity!
  removeSystemConfigBank(id: ID!): SystemConfigBankEntity!
  removeSystemConfigVariant(id: String!): SystemConfigVariantEntity!
  restoreCategory(id: String!): CategoryEntity!
  restoreProduct(id: String!): ProductEntity!
  sendEmail(to: String!): Boolean!
  shippedOrder(orderId: String!): OrderEntity!
  startRework(orderId: String!): OrderEntity!
  toggleActiveCategory(id: String!): CategoryEntity!
  toggleActiveProduct(id: String!): ProductEntity!
  updateAddress(id: String!, updateAddressInput: UpdateAddressInput!): AddressEntity!
  updateCartItem(id: String!, updateCartItemInput: UpdateCartItemDto!): CartItemEntity!
  updateCategory(id: String!, updateCategoryInput: UpdateCategoryDto!): CategoryEntity!
  updateDesignPosition(input: UpdateDesignPositionDto!): DesignPositionEntity!
  updateFactoryInfo(updateFactoryInfoInput: UpdateFactoryInfoDto!): FactoryEntity!
  updateFactoryProduct(data: UpdateFactoryProductInput!, factoryId: String!, systemConfigVariantId: String!): FactoryProductEntity!
  updatePaymentTransaction(id: ID!, input: UpdatePaymentTransactionInput!): PaymentTransactionEntity!
  updateProduct(id: String!, input: UpdateProductDto!): ProductEntity!
  updateProductDesign(id: String!, input: UpdateProductDesignDto!): ProductDesignEntity!
  updateProductPositionType(input: UpdateProductPositionTypeDto!): ProductPositionTypeEntity!
  updateSystemConfigBank(input: UpdateSystemConfigBankDto!): SystemConfigBankEntity!
  updateSystemConfigVariant(updateSystemConfigVariantInput: UpdateSystemConfigVariantInput!): SystemConfigVariantEntity!
  updateUser(id: String!, updateUserInput: UpdateUserDto!): UserEntity!
  uploadFile(file: Upload): FileUploadResponse!
}

type NotificationEntity {
  content: String
  createdAt: DateTime!
  id: ID!
  isRead: Boolean!
  title: String
  updatedAt: DateTime
  url: String
  user: UserEntity
}

type OrderDetailEntity {
  checkQualities: [CheckQualityEntity!]
  completedQty: Int!
  createdAt: DateTime!
  design: ProductDesignEntity
  designId: String!
  id: ID!
  isRework: Boolean!
  order: OrderEntity
  orderId: String!
  price: Int!
  productionCost: Int
  quantity: Int!
  rejectedQty: Int!
  reworkTime: Int!
  status: OrderDetailStatus!
  updatedAt: DateTime
}

enum OrderDetailStatus {
  COMPLETED
  DONE_CHECK_QUALITY
  DONE_PRODUCTION
  IN_PRODUCTION
  PENDING
  READY_FOR_SHIPPING
  REWORK_DONE
  REWORK_IN_PROGRESS
  REWORK_REQUIRED
  SHIPPED
  WAITING_FOR_CHECKING_QUALITY
}

type OrderEntity {
  acceptanceDeadline: DateTime
  acceptedAt: DateTime
  address: AddressEntity
  addressId: String
  assignedAt: DateTime
  completedAt: DateTime
  currentProgress: Int
  customer: UserEntity
  customerId: String!
  delayReason: String
  doneCheckQualityAt: DateTime
  doneProductionAt: DateTime
  estimatedCheckQualityAt: DateTime!
  estimatedCompletionAt: DateTime!
  estimatedDoneProductionAt: DateTime!
  estimatedShippingAt: DateTime!
  factory: FactoryEntity
  factoryId: String
  id: ID!
  isDelayed: Boolean!
  orderDate: DateTime!
  orderDetails: [OrderDetailEntity!]
  orderProgressReports: [OrderProgressReportEntity!]
  payments: [PaymentEntity!]
  ratedAt: DateTime
  ratedBy: String
  rating: Int
  ratingComment: String
  rejectedHistory: [RejectedOrderEntity!]
  shippedAt: DateTime
  shippingPrice: Int!
  status: OrderStatus!
  tasks: [TaskEntity!]
  totalItems: Int!
  totalPrice: Int!
  totalProductionCost: Int
  updatedAt: DateTime
}

type OrderProgressReportEntity {
  id: ID!
  imageUrls: [String!]!
  note: String
  order: OrderEntity
  orderId: String!
  reportDate: DateTime!
}

enum OrderStatus {
  CANCELED
  COMPLETED
  IN_PRODUCTION
  NEED_MANAGER_HANDLE
  PAYMENT_RECEIVED
  PENDING
  PENDING_ACCEPTANCE
  READY_FOR_SHIPPING
  REJECTED
  REWORK_IN_PROGRESS
  REWORK_REQUIRED
  SHIPPED
  WAITING_FILL_INFORMATION
  WAITING_FOR_CHECKING_QUALITY
  WAITING_PAYMENT
}

type PaymentEntity {
  amount: Int!
  customer: UserEntity
  customerId: String!
  id: ID!
  order: OrderEntity
  orderId: String!
  paymentLog: String!
  status: String!
  transactions: [PaymentTransactionEntity!]
  type: String!
}

"""Method of payment"""
enum PaymentMethod {
  PAYOS
  VNPAY
}

type PaymentTransactionEntity {
  amount: Float!
  createdAt: DateTime!
  customer: UserEntity
  customerId: ID!
  id: ID!
  paymentGatewayTransactionId: String!
  paymentMethod: PaymentMethod!
  status: TransactionStatus!
  transactionLog: String!
  type: TransactionType!
}

type ProductDesignEntity {
  createdAt: DateTime!
  designPositions: [DesignPositionEntity!]
  id: ID!
  isFinalized: Boolean!
  isPublic: Boolean!
  isTemplate: Boolean!
  systemConfigVariant: SystemConfigVariantEntity
  systemConfigVariantId: String!
  thumbnailUrl: String
  user: UserEntity
  userId: String!
}

"""Product"""
type ProductEntity {
  category: CategoryEntity
  categoryId: String!
  createdAt: DateTime!
  createdBy: String
  deletedAt: DateTime
  deletedBy: String
  description: String
  discounts: [SystemConfigDiscountEntity!]
  id: ID!
  imageUrl: String
  isActive: Boolean!
  isDeleted: Boolean!
  model3DUrl: String
  name: String!
  positionTypes: [ProductPositionTypeEntity!]
  updatedAt: DateTime
  updatedBy: String
  variants: [SystemConfigVariantEntity!]
  weight: Float
}

type ProductPositionTypeEntity {
  basePrice: Int!
  id: ID!
  positionName: String!
  positionTypes: [ProductPositionTypeEntity!]
  product: ProductEntity
  productId: String!
}

type Province {
  provinceId: Int!
  provinceName: String!
}

type Query {
  address(id: String!): AddressEntity!
  addresses: [AddressEntity!]!
  availableServices(servicesInput: GetAvailableServicesDto!): [ShippingService!]!
  categories: [CategoryEntity!]!
  category(id: String!): CategoryEntity!
  designPosition(designId: ID!, productPositionTypeId: ID!): DesignPositionEntity!
  distinctVariantAttributes(productId: String!): VariantAttributes!
  district(districtId: Int!): District!
  districts(provinceId: Int!): [District!]!
  factoryOrders: [OrderEntity!]!
  factoryProduct(factoryId: String!, systemConfigVariantId: String!): FactoryProductEntity!
  factoryProducts: [FactoryProductEntity!]!
  getAllFactories: [FactoryEntity!]!
  getCartItem(id: String!): CartItemEntity!
  getCartItemCount: Float!
  getFactoryById(factoryId: String!): FactoryEntity!
  getMe: UserEntity!
  getMyFactory: FactoryEntity!
  myNotifications: [NotificationEntity!]!
  myOrders: [OrderEntity!]!
  notification(id: String!): NotificationEntity!
  notifications: [NotificationEntity!]!
  notificationsByUserId(isRead: Boolean): [NotificationEntity!]!
  order(id: String!): OrderEntity!
  orders: [OrderEntity!]!
  paymentTransaction(id: ID!): PaymentTransactionEntity
  paymentTransactions: [PaymentTransactionEntity!]!
  paymentTransactionsByCustomer(customerId: ID!): [PaymentTransactionEntity!]!
  paymentTransactionsByPayment(paymentId: ID!): [PaymentTransactionEntity!]!
  product(id: String!): ProductEntity!
  productDesign(id: ID!): ProductDesignEntity!
  productDesigns: [ProductDesignEntity!]!
  productDesignsByUser: [ProductDesignEntity!]!
  productPositionType(id: ID!): ProductPositionTypeEntity!
  productPositionTypes(productId: String!): [ProductPositionTypeEntity!]!
  products: [ProductEntity!]!
  province(provinceId: Int!): Province!
  provinces: [Province!]!
  staffOrders: [OrderEntity!]!
  staffs: [UserEntity!]!
  systemConfigBank(id: ID!): SystemConfigBankEntity!
  systemConfigBanks: [SystemConfigBankEntity!]!
  systemConfigVariant(id: String!): SystemConfigVariantEntity!
  systemConfigVariants: [SystemConfigVariantEntity!]!
  systemConfigVariantsByProduct(productId: String!): [SystemConfigVariantEntity!]!
  user(id: String!): UserEntity!
  userCartItems: [CartItemEntity!]!
  users: [UserEntity!]!
  ward(wardCode: String!): Ward!
  wards(districtId: Int!): [Ward!]!
}

"""Refresh token input"""
input RefreshTokenDto {
  refreshToken: String!
}

"""Register input"""
input RegisterDto {
  email: String!

  """True if registering as factory owner, false for customer"""
  isFactoryOwner: Boolean! = false
  name: String!
  password: String!
}

type RejectedOrderEntity {
  factory: FactoryEntity
  factoryId: String!
  id: ID!
  order: OrderEntity
  orderId: String!
  reason: String!
  reassignedAt: DateTime
  reassignedTo: String
  rejectedAt: DateTime!
}

"""User roles"""
enum Roles {
  ADMIN
  CUSTOMER
  FACTORYOWNER
  MANAGER
  STAFF
}

type ShippingFee {
  total: Int!
}

type ShippingService {
  serviceId: Int!
  serviceTypeId: Int!
  shortName: String!
}

type SystemConfigBankEntity {
  bin: String!
  code: String!
  id: ID!
  isActive: Boolean!
  isDeleted: Boolean!
  logo: String!
  name: String!
  shortName: String!
}

type SystemConfigDiscountEntity {
  createdAt: DateTime!
  discountPercent: Float!
  id: ID!
  isActive: Boolean!
  isDeleted: Boolean!
  minQuantity: Float!
  name: String!
  product: ProductEntity!
  updatedAt: DateTime!
}

type SystemConfigVariantEntity {
  color: String
  id: ID!
  isActive: Boolean!
  isDeleted: Boolean!
  model: String
  price: Float
  product: ProductEntity!
  productId: String!
  size: String
}

type TaskEntity {
  assignedDate: DateTime!
  assignee: UserEntity
  checkQualities: [CheckQualityEntity!]
  completedDate: DateTime
  description: String!
  expiredTime: DateTime!
  id: ID!
  note: String
  order: OrderEntity
  orderId: String
  startDate: DateTime!
  status: String!
  taskType: String!
  taskname: String!
  userId: String
}

"""Status of transaction"""
enum TransactionStatus {
  COMPLETED
  FAILED
  PENDING
}

"""Type of transaction"""
enum TransactionType {
  PAYMENT
  REFUND
}

input UpdateAddressInput {
  districtID: Float
  factoryId: String
  provinceID: Float
  street: String
  wardCode: String
}

input UpdateCartItemDto {
  quantity: Int!
}

"""Update category input"""
input UpdateCategoryDto {
  description: String
  imageUrl: String
  name: String
}

input UpdateDesignPositionDto {
  designId: String!
  designJSON: JSON
  productPositionTypeId: String!
}

"""Update factory information input"""
input UpdateFactoryInfoDto {
  addressInput: CreateAddressInput
  businessLicenseUrl: String
  contactPersonName: String
  contactPersonPhone: String
  contactPersonRole: String
  description: String
  establishedDate: DateTime
  leadTime: Int
  maxPrintingCapacity: Int
  minimumOrderQuantity: Int
  name: String
  operationalHours: String
  printingMethods: [String!]
  qualityCertifications: String
  specializations: [String!]
  systemConfigVariantIds: [String!]
  taxIdentificationNumber: String
  totalEmployees: Int
  website: String
}

input UpdateFactoryProductInput {
  estimatedProductionTime: Int
  factoryId: String
  productionCapacity: Int
  systemConfigVariantId: String
}

input UpdateFactoryStatusDto {
  factoryOwnerId: String!
  status: FactoryStatus!
}

input UpdatePaymentTransactionInput {
  amount: Int
  customerId: String
  paymentGatewayTransactionId: String
  paymentId: String
  paymentMethod: PaymentMethod
  status: TransactionStatus
  transactionLog: String
  type: TransactionType
}

input UpdateProductDesignDto {
  isFinalized: Boolean = false
  isPublic: Boolean = false
  isTemplate: Boolean = false
  systemConfigVariantId: String
  thumbnailUrl: String
  userId: String
}

"""Update Product"""
input UpdateProductDto {
  categoryId: String
  description: String
  imageUrl: String
  model3DUrl: String
  name: String
  weight: Float
}

input UpdateProductPositionTypeDto {
  basePrice: Int
  id: ID!
  positionName: String
  productId: String
}

input UpdateSystemConfigBankDto {
  bin: String
  code: String
  id: ID!
  isActive: Boolean = true
  logo: String
  name: String
  shortName: String
}

input UpdateSystemConfigVariantInput {
  color: String
  id: String!
  isActive: Boolean
  model: String
  productId: String
  size: String
}

"""Update user input"""
input UpdateUserDto {
  dateOfBirth: String
  email: String
  gender: Boolean = false
  imageUrl: String
  name: String
  password: String
  phoneNumber: String
  role: String
  updatedBy: String
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

type UserEntity {
  createdAt: DateTime!
  createdBy: String
  dateOfBirth: DateTime
  deletedAt: DateTime
  deletedBy: String
  email: String
  gender: Boolean!
  id: ID!
  imageUrl: String
  isActive: Boolean!
  isDeleted: Boolean!
  name: String
  ownedFactory: FactoryEntity
  phoneNumber: String
  role: Roles!
  staffedFactory: FactoryEntity
  updatedAt: DateTime
  updatedBy: String
}

type VariantAttributes {
  colors: [String!]!
  models: [String!]!
  sizes: [String!]!
}

type Ward {
  districtId: Int!
  wardCode: String!
  wardName: String!
}